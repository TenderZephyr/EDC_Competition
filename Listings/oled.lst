C51 COMPILER V9.54   OLED                                                                  07/07/2023 11:59:38 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE OLED
OBJECT MODULE PLACED IN .\Objects\oled.obj
COMPILER INVOKED BY: D:\Keil 5\C51\BIN\C51.EXE oled.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings
                    -\oled.lst) TABS(2) OBJECT(.\Objects\oled.obj)

line level    source

   1          #include "reg51.h"
   2          #include <oled.h>
   3          #include <oledfont.h>   //È¡Ä£ï¿½ï¿½ï¿½Ö¿ï¿½
   4          #include "OLED_IIc.h"
   5          
   6          #define OLED_CMD  0     //Ð´ï¿½ï¿½ï¿½ï¿½
   7          #define OLED_DATA 1     //Ð´ï¿½ï¿½ï¿½ï¿½
   8          #define OLED_MODE 0
   9          
  10          #define OLED_CS_Clr()  OLED_CS=0
  11          #define OLED_CS_Set()  OLED_CS=1
  12          
  13          #define OLED_RST_Clr() OLED_RST=0
  14          #define OLED_RST_Set() OLED_RST=1
  15          
  16          #define OLED_DC_Clr() OLED_DC=0
  17          #define OLED_DC_Set() OLED_DC=1
  18          
  19          #define OLED_SCLK_Clr() OLED_SCL=0
  20          #define OLED_SCLK_Set() OLED_SCL=1
  21          
  22          #define OLED_SDIN_Clr() OLED_SDIN=0
  23          #define OLED_SDIN_Set() OLED_SDIN=1
  24          
  25          //OLEDÄ£Ê½ï¿½ï¿½ï¿½ï¿½
  26          //0:4ï¿½ß´ï¿½ï¿½ï¿½Ä£Ê½
  27          //1:ï¿½ï¿½ï¿½ï¿½8080Ä£Ê½
  28          
  29          #define SIZE 16
  30          #define XLevelL   0x02
  31          #define XLevelH   0x10
  32          #define Max_Column  128
  33          #define Max_Row   64
  34          #define Brightness  0xFF 
  35          #define X_WIDTH   128
  36          #define Y_WIDTH   64     
  37          
  38          sbit OLED_SCL = P2^0;     // OLED SCLK ï¿½ï¿½ï¿½ï¿½
  39          sbit OLED_SDIN = P2^1;    // OLED SDA  ï¿½ï¿½ï¿½ï¿½ 
  40          
  41          void OLED_WR_Byte(unsigned dat,unsigned cmd)
  42          {
  43   1        if(cmd)
  44   1        {
  45   2          Write_IIC_Data(dat);
  46   2        }
  47   1        else 
  48   1          {
  49   2            Write_IIC_Command(dat); 
  50   2          }
  51   1      }
  52          //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
  53          void OLED_Set_Pos(unsigned char x, unsigned char y) 
  54          {   OLED_WR_Byte(0xb0+y,OLED_CMD);
C51 COMPILER V9.54   OLED                                                                  07/07/2023 11:59:38 PAGE 2   

  55   1        OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
  56   1        OLED_WR_Byte((x&0x0f),OLED_CMD); 
  57   1      }         
  58          void OLED_Clear(void)  
  59          {  
  60   1        u8 i,n;       
  61   1        for(i=0;i<8;i++)  
  62   1        {  
  63   2          OLED_WR_Byte (0xb0+i,OLED_CMD);    //ï¿½ï¿½ï¿½ï¿½Ò³ï¿½ï¿½Ö·ï¿½ï¿½0~7ï¿½ï¿½
  64   2          OLED_WR_Byte (0x00,OLED_CMD);      //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê¾Î»ï¿½Ã¡ï¿½ï¿½ÐµÍµï¿½Ö·
  65   2          OLED_WR_Byte (0x10,OLED_CMD);      //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê¾Î»ï¿½Ã¡ï¿½ï¿½Ð¸ßµï¿½Ö·   
  66   2          for(n=0;n<128;n++)OLED_WR_Byte(0,OLED_DATA); 
  67   2        } //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê¾
  68   1      }
  69          /*void OLED_On(void)  
  70          {  
  71            u8 i,n;       
  72            for(i=0;i<8;i++)  
  73            {  
  74              OLED_WR_Byte (0xb0+i,OLED_CMD);    //ï¿½ï¿½ï¿½ï¿½Ò³ï¿½ï¿½Ö·ï¿½ï¿½0~7ï¿½ï¿½
  75              OLED_WR_Byte (0x00,OLED_CMD);      //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê¾Î»ï¿½Ã¡ï¿½ï¿½ÐµÍµï¿½Ö·
  76              OLED_WR_Byte (0x10,OLED_CMD);      //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê¾Î»ï¿½Ã¡ï¿½ï¿½Ð¸ßµï¿½Ö·   
  77              for(n=0;n<128;n++)OLED_WR_Byte(1,OLED_DATA); 
  78            } //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê¾
  79          }*/
  80          //ï¿½ï¿½Ö¸ï¿½ï¿½Î»ï¿½ï¿½ï¿½ï¿½Ê¾Ò»ï¿½ï¿½ï¿½Ö·ï¿½,ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ö·ï¿½
  81          //x:0~127
  82          //y:0~63
  83          //mode:0,ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê¾;1,ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê¾         
  84          //size:Ñ¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ 16/12 
  85          void OLED_ShowChar(u8 x,u8 y,u8 chr,u8 Char_Size)
  86          {       
  87   1        unsigned char c=0,i=0;  
  88   1          c=chr-' ';//ï¿½Ãµï¿½Æ«ï¿½Æºï¿½ï¿½Öµ     
  89   1          if(x>Max_Column-1){x=0;y=y+2;}
  90   1          if(Char_Size ==16)
  91   1            {
  92   2            OLED_Set_Pos(x,y);  
  93   2            for(i=0;i<8;i++)
  94   2            OLED_WR_Byte(F8X16[c*16+i],OLED_DATA);
  95   2            OLED_Set_Pos(x,y+1);
  96   2            for(i=0;i<8;i++)
  97   2            OLED_WR_Byte(F8X16[c*16+i+8],OLED_DATA);
  98   2            }
  99   1            else {  
 100   2              OLED_Set_Pos(x,y);
 101   2              for(i=0;i<6;i++)
 102   2              OLED_WR_Byte(F6x8[c][i],OLED_DATA);
 103   2              
 104   2            }
 105   1      }
 106          //m^nï¿½ï¿½ï¿½ï¿½
 107          u32 oled_pow(u8 m,u8 n)
 108          {
 109   1        u32 result=1;  
 110   1        while(n--)result*=m;    
 111   1        return result;
 112   1      }         
 113          //ï¿½ï¿½Ê¾2ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
 114          //x,y :ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½   
 115          //len :ï¿½ï¿½ï¿½Öµï¿½Î»ï¿½ï¿½
 116          //size:ï¿½ï¿½ï¿½ï¿½ï¿½Ð¡
C51 COMPILER V9.54   OLED                                                                  07/07/2023 11:59:38 PAGE 3   

 117          //num:ï¿½ï¿½Öµ(0~4294967295);       
 118          void OLED_ShowNum(u8 x,u8 y,u32 num,u8 len,u8 size2)
 119          {           
 120   1        u8 t,temp;
 121   1        u8 enshow=0;               
 122   1        for(t=0;t<len;t++)
 123   1        {
 124   2          temp=(num/oled_pow(10,len-t-1))%10;
 125   2          if(enshow==0&&t<(len-1))
 126   2          {
 127   3            if(temp==0)
 128   3            {
 129   4            //  OLED_ShowChar(x+(size2/2)*t,y,' ',size2);//ï¿½Ë¾ï¿½ÎªÔ­ï¿½ä£¬ï¿½ï¿½Î»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Øµï¿½(size
             -2 = 8 Ê±ï¿½ï¿½size/2 = 4,ï¿½Ö·ï¿½ï¿½ï¿½ï¿½ï¿½Îª6ï¿½ï¿½ï¿½Ø£ï¿½ï¿½ï¿½ï¿½Øµï¿½)
 130   4              if(size2 == 8) OLED_ShowChar(x+(size2/2+2)*t,y,' ',size2);//ï¿½Ë¾ï¿½Îªï¿½Þ¸Ä¾ï¿½,ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
             -ï¿½ï¿½ï¿½ï¿½È´ï¿½ï¿½ï¿½1ï¿½Øµï¿½ï¿½ï¿½ï¿½ï¿½        @ï¿½ï¿½ï¿½ï¿½ï¿½Ù³ï¿½ 
 131   4              else if(size2 == 16) OLED_ShowChar(x+(size2/2)*t,y,' ',size2);//ï¿½Ë¾ï¿½Îªï¿½Þ¸Ä¾ï¿½,ï¿½ï¿½ï¿½ï¿½ï¿½ï¿
             -½ï¿½ï¿½ï¿½ï¿½ï¿½È´ï¿½ï¿½ï¿½1ï¿½Øµï¿½ï¿½ï¿½ï¿½ï¿½    @ï¿½ï¿½ï¿½ï¿½ï¿½Ù³ï¿½
 132   4              continue;
 133   4            }else enshow=1; 
 134   3          }
 135   2        //  OLED_ShowChar(x+(size2/2)*t,y,temp+'0',size2); //ï¿½Ë¾ï¿½ÎªÔ­ï¿½ä£¬ï¿½ï¿½Î»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Øµï¿½
             -(size2 = 8 Ê±ï¿½ï¿½size/2 = 4,ï¿½Ö·ï¿½ï¿½ï¿½ï¿½ï¿½Îª6ï¿½ï¿½ï¿½Ø£ï¿½ï¿½ï¿½ï¿½Øµï¿½)
 136   2            if(size2 == 8)  OLED_ShowChar(x+(size2/2+2)*t,y,temp+'0',size2);//ï¿½Ë¾ï¿½Îªï¿½Þ¸Ä¾ï¿½,ï¿½ï¿½ï¿½ï¿½ï¿½ï
             -¿½ï¿½ï¿½ï¿½ï¿½ï¿½È´ï¿½ï¿½ï¿½1ï¿½Øµï¿½ï¿½ï¿½ï¿½ï¿½       @ï¿½ï¿½ï¿½ï¿½ï¿½Ù³ï¿½ 
 137   2            else if(size2 == 16)  OLED_ShowChar(x+(size2/2)*t,y,temp+'0',size2);//ï¿½Ë¾ï¿½Îªï¿½Þ¸Ä¾ï¿½,ï¿½ï¿½ï¿½ï¿½
             -ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½È´ï¿½ï¿½ï¿½1ï¿½Øµï¿½ï¿½ï¿½ï¿½ï¿½   @ï¿½ï¿½ï¿½ï¿½ï¿½Ù³ï¿½
 138   2          
 139   2        }
 140   1      } 
 141          //ï¿½ï¿½Ê¾Ò»ï¿½ï¿½ï¿½Ö·ï¿½ï¿½ï¿½
 142          void OLED_ShowString(u8 x,u8 y,u8 *chr,u8 Char_Size)
 143          {
 144   1        unsigned char j=0;
 145   1        while (chr[j]!='\0')
 146   1        {   OLED_ShowChar(x,y,chr[j],Char_Size);
 147   2            x+=8;
 148   2          if(x>120){x=0;y+=2;}
 149   2            j++;
 150   2        }
 151   1      }
 152          //ï¿½ï¿½Ê¾ï¿½ï¿½ï¿½ï¿½
 153          void OLED_ShowCHinese(u8 x,u8 y,u8 no)
 154          {               
 155   1        u8 t,adder=0;
 156   1        OLED_Set_Pos(x,y);  
 157   1          for(t=0;t<16;t++)
 158   1          {
 159   2              OLED_WR_Byte(Hzk[2*no][t],OLED_DATA);
 160   2              adder+=1;
 161   2          } 
 162   1          OLED_Set_Pos(x,y+1);  
 163   1          for(t=0;t<16;t++)
 164   1            { 
 165   2              OLED_WR_Byte(Hzk[2*no+1][t],OLED_DATA);
 166   2              adder+=1;
 167   2        }         
 168   1      }
 169          
 170          //ï¿½ï¿½Ê¼ï¿½ï¿½SSD1306             
 171          void OLED_Init(void)
 172          {   
C51 COMPILER V9.54   OLED                                                                  07/07/2023 11:59:38 PAGE 4   

 173   1        OLED_WR_Byte(0xAE,OLED_CMD);//--display off
 174   1        OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
 175   1        OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 176   1        OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  
 177   1        OLED_WR_Byte(0xB0,OLED_CMD);//--set page address
 178   1        OLED_WR_Byte(0x81,OLED_CMD); // contract control
 179   1        OLED_WR_Byte(0xFF,OLED_CMD);//--128   
 180   1        OLED_WR_Byte(0xA1,OLED_CMD);//set segment remap 
 181   1        OLED_WR_Byte(0xA6,OLED_CMD);//--normal / reverse
 182   1        OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 183   1        OLED_WR_Byte(0x3F,OLED_CMD);//--1/32 duty
 184   1        OLED_WR_Byte(0xC8,OLED_CMD);//Com scan direction
 185   1        OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset
 186   1        OLED_WR_Byte(0x00,OLED_CMD);//
 187   1        
 188   1        OLED_WR_Byte(0xD5,OLED_CMD);//set osc division
 189   1        OLED_WR_Byte(0x80,OLED_CMD);//
 190   1        
 191   1        OLED_WR_Byte(0xD8,OLED_CMD);//set area color mode off
 192   1        OLED_WR_Byte(0x05,OLED_CMD);//
 193   1        
 194   1        OLED_WR_Byte(0xD9,OLED_CMD);//Set Pre-Charge Period
 195   1        OLED_WR_Byte(0xF1,OLED_CMD);//
 196   1        
 197   1        OLED_WR_Byte(0xDA,OLED_CMD);//set com pin configuartion
 198   1        OLED_WR_Byte(0x12,OLED_CMD);//
 199   1        
 200   1        OLED_WR_Byte(0xDB,OLED_CMD);//set Vcomh
 201   1        OLED_WR_Byte(0x30,OLED_CMD);//
 202   1        
 203   1        OLED_WR_Byte(0x8D,OLED_CMD);//set charge pump enable
 204   1        OLED_WR_Byte(0x14,OLED_CMD);//
 205   1        
 206   1        OLED_WR_Byte(0xAF,OLED_CMD);//--turn on oled panel
 207   1      }  
 208          
 209          void OLED_Display(float Temp, u8 vH, int vLx, unsigned int warn)
 210          {
 211   1            OLED_ShowCHinese(0 ,0,8);         //(x,y,ï¿½ï¿½)
 212   1            OLED_ShowCHinese(18,0,7);         //ï¿½ï¿½
 213   1            OLED_ShowChar(36,1,':',8);        //ï¿½Â¸ï¿½ï¿½ï¿½Ê¼Îª42(x,y,':',size ï¿½ï¿½Ð¡8Î» ï¿½Â¸ï¿½x+6)
 214   1            OLED_ShowNum(42,0,Temp/1,2,16); // 42+2*8
 215   1            OLED_ShowChar(58,1,'.',8);   //58+6
 216   1            OLED_ShowNum(64,0,Temp*10,1,16); // 64+8  ï¿½ï¿½Ê¾Ò»Î»ï¿½È¿ï¿½È¡Ð¡ï¿½ï¿½  28.5*10-->285-->len=1-->5
 217   1            OLED_ShowString(72,0,"'C",16);    
 218   1            
 219   1            OLED_ShowCHinese(0 ,2,9);         //Êª
 220   1            OLED_ShowCHinese(18,2,7);         //ï¿½ï¿½
 221   1            OLED_ShowChar(36,3,':',8);        //ï¿½Â¸ï¿½ï¿½ï¿½Ê¼Îª42  
 222   1            OLED_ShowNum(42,2,vH,2,16); // 42+2*8
 223   1            //OLED_ShowString(42,2,humidity[],16);  //OLED_ShowChar(42,2,humidity,16);   //78+4*8//OLED_ShowFloat(42
             -,2,humidity,2);  //85   42+8*2
 224   1            OLED_ShowChar(58,2,'%',16); 
 225   1            
 226   1            OLED_ShowCHinese(0 ,4,4);         
 227   1            OLED_ShowCHinese(18,4,5);     
 228   1            OLED_ShowCHinese(36,4,6);         
 229   1            OLED_ShowCHinese(54,4,7);   
 230   1            OLED_ShowChar(72,5,':',8);  
 231   1            OLED_ShowNum(78,4,vLx,4,16);   //78+4*8
 232   1            OLED_ShowString(110,4,"LX",16);     
 233   1            
C51 COMPILER V9.54   OLED                                                                  07/07/2023 11:59:38 PAGE 5   

 234   1            OLED_ShowCHinese(0 ,6,0);       //ï¿½ï¿½  ï¿½Óµï¿½0ï¿½Ð£ï¿½Õ¼ï¿½ï¿½0-15ï¿½ï¿½ï¿½ï¿½16ï¿½Ð£ï¿½ï¿½ï¿½   ï¿½ï¿
             -½0Ò³ï¿½ï¿½Õ¼0-1Ò³ï¿½ï¿½0-16ï¿½ï¿½ï¿½ï¿½ï¿½Ø£ï¿½ï¿½ï¿½Hzk[0]:ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
 235   1            OLED_ShowCHinese(18,6,1);       //Ç°  ï¿½Óµï¿½18ï¿½Ð£ï¿½ï¿½ï¿½2ï¿½Ð£ï¿½Õ¼ï¿½ï¿½18-33ï¿½Ð£ï¿½ï¿½ï¿½ï¿½ï¿½0Ò
             -³ï¿½ï¿½Õ¼0-1Ò³ï¿½ï¿½0-16ï¿½ï¿½ï¿½ï¿½ï¿½Ø£ï¿½ï¿½ï¿½Hzk[1]:ï¿½ï¿½Ç°ï¿½ï¿½
 236   1            OLED_ShowCHinese(36,6,2);       //×´  ï¿½Óµï¿½36ï¿½Ð£ï¿½ï¿½ï¿½2ï¿½Ð£ï¿½Õ¼ï¿½ï¿½36-51ï¿½Ð£ï¿½ï¿½ï¿½ï¿½ï¿½0Ò³
             -ï¿½ï¿½Õ¼0-1Ò³ï¿½ï¿½0-16ï¿½ï¿½ï¿½ï¿½ï¿½Ø£ï¿½ï¿½ï¿½Hzk[2]:ï¿½ï¿½Ä£ï¿½ï¿½
 237   1            OLED_ShowCHinese(54,6,3);       //Ì¬  ï¿½Óµï¿½54ï¿½Ð£ï¿½ï¿½ï¿½2ï¿½Ð£ï¿½Õ¼ï¿½ï¿½54-69ï¿½Ð£ï¿½ï¿½ï¿½ï¿½ï¿½0Ò³
             -ï¿½ï¿½Õ¼0-1Ò³ï¿½ï¿½0-16ï¿½ï¿½ï¿½ï¿½ï¿½Ø£ï¿½ï¿½ï¿½Hzk[3]:ï¿½ï¿½Ê½ï¿½ï¿½
 238   1            OLED_ShowChar(72,7,':',8);    // ï¿½Óµï¿½72ï¿½ï¿½ï¿½ï¿½ï¿½Ø¡ï¿½ï¿½ï¿½1Ò³ï¿½ï¿½ï¿½ï¿½8ï¿½ï¿½ï¿½ï¿½ï¿½Ø£ï¿½
             -ï¿½ï¿½Ê¼ï¿½ï¿½Ê¾ï¿½ï¿½Ð¡Îª6*8ï¿½ï¿½ï¿½Øµï¿½ï¿½Ö·ï¿½ï¿½ï¿½:ï¿½ï¿½   ï¿½ï¿½6
 239   1          
 240   1            if(warn != 1)                             //ï¿½Ð¶ï¿½ï¿½ï¿½ï¿½ï¿½0ï¿½ï¿½ï¿½Ç¾ï¿½ï¿½ï¿½1
 241   1            {
 242   2              OLED_ShowCHinese(78,6,10);        //ï¿½ï¿½
 243   2              OLED_ShowCHinese(96,6,11);        //ï¿½ï¿½
 244   2            }
 245   1            else
 246   1            {
 247   2              OLED_ShowCHinese(78,6,12);        //ï¿½ï¿½
 248   2              OLED_ShowCHinese(96,6,13);        //ï¿½ï¿½
 249   2            }
 250   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1660    ----
   CONSTANT SIZE    =   2974    ----
   XDATA SIZE       =   ----      42
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
